// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: proto/v1/central/central.proto

package centralproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CentralService_ActionUserInput_FullMethodName = "/centralproto.v1.CentralService/ActionUserInput"
	CentralService_CallFnUserInput_FullMethodName = "/centralproto.v1.CentralService/CallFnUserInput"
)

// CentralServiceClient is the client API for CentralService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CentralServiceClient interface {
	// Simple RPC
	//
	// Translates user input and actions some user input in some way that the caller cannot know.
	// The response will encode releveant information to respond to the user with, but generally
	// you cannot know exactly what actions are taken.
	// This rpc will parse user input into some structured format, and then
	// link together the services required based on that structured output.
	ActionUserInput(ctx context.Context, in *ActionUserInputRequest, opts ...grpc.CallOption) (*ActionUserInputResponse, error)
	// Simple RPC
	//
	// As opposed to the actioning of user input, this endpoint allows for the translator
	// to actually call the functions themselves, rather than them being stitched together
	// by the implementing rpc service.
	CallFnUserInput(ctx context.Context, in *CallFnUserInputRequest, opts ...grpc.CallOption) (*CallFnUserInputResponse, error)
}

type centralServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCentralServiceClient(cc grpc.ClientConnInterface) CentralServiceClient {
	return &centralServiceClient{cc}
}

func (c *centralServiceClient) ActionUserInput(ctx context.Context, in *ActionUserInputRequest, opts ...grpc.CallOption) (*ActionUserInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ActionUserInputResponse)
	err := c.cc.Invoke(ctx, CentralService_ActionUserInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *centralServiceClient) CallFnUserInput(ctx context.Context, in *CallFnUserInputRequest, opts ...grpc.CallOption) (*CallFnUserInputResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallFnUserInputResponse)
	err := c.cc.Invoke(ctx, CentralService_CallFnUserInput_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CentralServiceServer is the server API for CentralService service.
// All implementations must embed UnimplementedCentralServiceServer
// for forward compatibility.
type CentralServiceServer interface {
	// Simple RPC
	//
	// Translates user input and actions some user input in some way that the caller cannot know.
	// The response will encode releveant information to respond to the user with, but generally
	// you cannot know exactly what actions are taken.
	// This rpc will parse user input into some structured format, and then
	// link together the services required based on that structured output.
	ActionUserInput(context.Context, *ActionUserInputRequest) (*ActionUserInputResponse, error)
	// Simple RPC
	//
	// As opposed to the actioning of user input, this endpoint allows for the translator
	// to actually call the functions themselves, rather than them being stitched together
	// by the implementing rpc service.
	CallFnUserInput(context.Context, *CallFnUserInputRequest) (*CallFnUserInputResponse, error)
	mustEmbedUnimplementedCentralServiceServer()
}

// UnimplementedCentralServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCentralServiceServer struct{}

func (UnimplementedCentralServiceServer) ActionUserInput(context.Context, *ActionUserInputRequest) (*ActionUserInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActionUserInput not implemented")
}
func (UnimplementedCentralServiceServer) CallFnUserInput(context.Context, *CallFnUserInputRequest) (*CallFnUserInputResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CallFnUserInput not implemented")
}
func (UnimplementedCentralServiceServer) mustEmbedUnimplementedCentralServiceServer() {}
func (UnimplementedCentralServiceServer) testEmbeddedByValue()                        {}

// UnsafeCentralServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CentralServiceServer will
// result in compilation errors.
type UnsafeCentralServiceServer interface {
	mustEmbedUnimplementedCentralServiceServer()
}

func RegisterCentralServiceServer(s grpc.ServiceRegistrar, srv CentralServiceServer) {
	// If the following call pancis, it indicates UnimplementedCentralServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CentralService_ServiceDesc, srv)
}

func _CentralService_ActionUserInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ActionUserInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServiceServer).ActionUserInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentralService_ActionUserInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServiceServer).ActionUserInput(ctx, req.(*ActionUserInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CentralService_CallFnUserInput_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallFnUserInputRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CentralServiceServer).CallFnUserInput(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CentralService_CallFnUserInput_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CentralServiceServer).CallFnUserInput(ctx, req.(*CallFnUserInputRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CentralService_ServiceDesc is the grpc.ServiceDesc for CentralService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CentralService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "centralproto.v1.CentralService",
	HandlerType: (*CentralServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ActionUserInput",
			Handler:    _CentralService_ActionUserInput_Handler,
		},
		{
			MethodName: "CallFnUserInput",
			Handler:    _CentralService_CallFnUserInput_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/v1/central/central.proto",
}
